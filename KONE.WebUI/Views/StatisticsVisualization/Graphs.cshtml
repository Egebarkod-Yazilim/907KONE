@{
    Layout = "_Layout";
}
@await Html.PartialAsync("_Breadcrumb", new KONE.KOne.WebUI.Models.BreadCrumb.BreadCrumbViewModel
{
    HeaderTitle = "Grafikler",
    PageNames = new List<string>() { "Admin", "Anasayfa", "Grafikler" },
    Url = "/Admin/Home/Index"
})

<ul class="nav nav-tabs tab-style-2 nav-justified mb-3 d-sm-flex d-block" id="myTab1" role="tablist">
    <li class="nav-item" role="presentation">
        <button class="nav-link active" id="order-tab" data-bs-toggle="tab" data-bs-target="#order-tab-pane" type="button" role="tab" aria-controls="home-tab-pane" aria-selected="true"><i class="ri-gift-line me-1 align-middle"></i>Ürüne Göre</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="confirmed-tab" data-bs-toggle="tab" data-bs-target="#confirm-tab-pane" type="button" role="tab" aria-controls="profile-tab-pane" aria-selected="false" tabindex="-1"><i class="ri-check-double-line me-1 align-middle"></i>Müstahsile Göre</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="shipped-tab" data-bs-toggle="tab" data-bs-target="#shipped-tab-pane" type="button" role="tab" aria-controls="contact-tab-pane" aria-selected="false" tabindex="-1"><i class="ri-shopping-bag-3-line me-1 align-middle"></i>İllere Göre</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="delivered-tab" data-bs-toggle="tab" data-bs-target="#delivered-tab-pane" type="button" role="tab" aria-selected="false" tabindex="-1"><i class="ri-truck-line me-1 align-middle"></i>Müstahsil-Ürün Kalite</button>
    </li>
    <li class="nav-item" role="presentation">
        <button class="nav-link" id="timeline-tab" data-bs-toggle="tab" data-bs-target="#timeline-tab-pane" type="button" role="tab" aria-selected="false" tabindex="-1"><i class="ri-truck-line me-1 align-middle"></i>Ürün Zaman Çizelgesi</button>
    </li>
</ul>
<div class="tab-content" id="myTabContent">
    <div class="tab-pane fade text-muted active show" id="order-tab-pane" role="tabpanel" aria-labelledby="home-tab" tabindex="0">
        @await Component.InvokeAsync("ManufacturersByProductGraphViewComponent")

    </div>
    <div class="tab-pane fade text-muted" id="confirm-tab-pane" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">
        @await Component.InvokeAsync("ProductDistributionChartByProducerViewComponent")

    </div>
    <div class="tab-pane fade text-muted" id="shipped-tab-pane" role="tabpanel" aria-labelledby="contact-tab" tabindex="0">
        @await Component.InvokeAsync("QualityByProvincesGraphViewComponent")

    </div>
    <div class="tab-pane fade text-muted" id="delivered-tab-pane" role="tabpanel" tabindex="0" aria-labelledby="delivered-tab">
        @await Component.InvokeAsync("ProducerProductQualityAndAmountGraphViewComponent")

    </div>
    <div class="tab-pane fade text-muted" id="timeline-tab-pane" role="tabpanel" tabindex="0" aria-labelledby="timeline-tab">
        @await Component.InvokeAsync("ProductTimeLineReportViewComponent")


    </div>
</div>

@section Styles{
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/select2/4.0.13/css/select2.min.css" integrity="sha512-nMNlpuaDPrqlEls3IX/Q56H36qvBASwb3ipuo3MxeWbsQB1881ox0cRv7UPTgBlriqoynt35KjEwgGUeUXIPnw==" crossorigin="anonymous" referrerpolicy="no-referrer" />
<style>
    .selected-row {
        background-color: #f0f0f0; /* Seçili satırın arka plan rengi */
        /* İstenilen diğer stillemeler buraya eklenebilir */
    }

</style>
}

@section Scripts{
    <script src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/1.4.1/html2canvas.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>

    <script src="~/js/graphreport.js"></script>
    <script>
        // PDF'ye grafiği kaydet
        document.getElementById('printPdf1').addEventListener('click', function () {
            html2canvas(document.getElementById('printArea1')).then(function (canvas) {
                const imgData = canvas.toDataURL('image/png');
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF('landscape'); // Landscape orientation

                // PDF boyutlarını al
                const pdfWidth = pdf.internal.pageSize.getWidth();
                const pdfHeight = pdf.internal.pageSize.getHeight();

                // Canvas boyutlarını al
                const canvasWidth = canvas.width;
                const canvasHeight = canvas.height;

                // Oranları hesapla
                const ratio = Math.min(pdfWidth / canvasWidth, pdfHeight / canvasHeight);

                // Yeni boyutları hesapla
                const imgWidth = canvasWidth * ratio;
                const imgHeight = canvasHeight * ratio;

                // Görüntüyü PDF'ye ekle
                pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
                pdf.save("chart.pdf");
            });
        });

        document.getElementById('printPdf2').addEventListener('click', function () {
            html2canvas(document.getElementById('printArea2')).then(function (canvas) {
                const imgData = canvas.toDataURL('image/png');
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF('landscape'); // Landscape orientation

                // PDF boyutlarını al
                const pdfWidth = pdf.internal.pageSize.getWidth();
                const pdfHeight = pdf.internal.pageSize.getHeight();

                // Canvas boyutlarını al
                const canvasWidth = canvas.width;
                const canvasHeight = canvas.height;

                // Oranları hesapla
                const ratio = Math.min(pdfWidth / canvasWidth, pdfHeight / canvasHeight);

                // Yeni boyutları hesapla
                const imgWidth = canvasWidth * ratio;
                const imgHeight = canvasHeight * ratio;

                // Görüntüyü PDF'ye ekle
                pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
                pdf.save("chart.pdf");
            });


        });

        document.getElementById('printPdf3').addEventListener('click', function () {
            html2canvas(document.getElementById('printArea3')).then(function (canvas) {
                const imgData = canvas.toDataURL('image/png');
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF('landscape'); // Landscape orientation

                // PDF boyutlarını al
                const pdfWidth = pdf.internal.pageSize.getWidth();
                const pdfHeight = pdf.internal.pageSize.getHeight();

                // Canvas boyutlarını al
                const canvasWidth = canvas.width;
                const canvasHeight = canvas.height;

                // Oranları hesapla
                const ratio = Math.min(pdfWidth / canvasWidth, pdfHeight / canvasHeight);

                // Yeni boyutları hesapla
                const imgWidth = canvasWidth * ratio;
                const imgHeight = canvasHeight * ratio;

                // Görüntüyü PDF'ye ekle
                pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
                pdf.save("chart.pdf");
            });


        });

        document.getElementById('printPdf4').addEventListener('click', function () {
            html2canvas(document.getElementById('printArea4')).then(function (canvas) {
                const imgData = canvas.toDataURL('image/png');
                const { jsPDF } = window.jspdf;
                const pdf = new jsPDF('landscape'); // Landscape orientation

                // PDF boyutlarını al
                const pdfWidth = pdf.internal.pageSize.getWidth();
                const pdfHeight = pdf.internal.pageSize.getHeight();

                // Canvas boyutlarını al
                const canvasWidth = canvas.width;
                const canvasHeight = canvas.height;

                // Oranları hesapla
                const ratio = Math.min(pdfWidth / canvasWidth, pdfHeight / canvasHeight);

                // Yeni boyutları hesapla
                const imgWidth = canvasWidth * ratio;
                const imgHeight = canvasHeight * ratio;

                // Görüntüyü PDF'ye ekle
                pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
                pdf.save("chart.pdf");
            });


        });
    </script>
    <script>
        $(document).ready(function () {
            $('#farmers').select2();
            $('#specificSizeSelectCurrentUsers').select2();
            $('#productDropdown').select2();
        });


    </script>
}